stages:
  - build
  - scan

variables:
  IMAGE_NAME: "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"

build-image:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_NAME .
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

security-scan:
  stage: scan
  image: aquasec/trivy:latest
  before_script:
    - mkdir -p ./bin
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ./bin
    - export PATH="$PATH:$(pwd)/bin"
  script:
    - ./bin/trivy image --format json --output trivy-report.json $IMAGE_NAME || true
  artifacts:
    name: "trivy-report"
    paths:
      - trivy-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

grype-scan:
  stage: scan
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock anchore/grype:latest $IMAGE_NAME -o json > grype-report.json || true
  artifacts:
    name: "grype-report.json"
    paths:
      - grype-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

snyk-scan:
  stage: scan
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -e SNYK_TOKEN=$SNYK_TOKEN  snyk/snyk:alpine /usr/local/bin/snyk test --docker debian:12 --json > snyk-report.json || true
  artifacts:
    name: "snyk-report.json"
    paths:
      - snyk-report.json
    when: always
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
